<?xml version="1.0" encoding="utf-8"?>
<FxCopProject Version="1.23" Name="NetSpell">
 <ProjectOptions>
  <SharedProject>False</SharedProject>
  <Stylesheet Apply="False">c:\program files\microsoft fxcop 1.23\Xml\FxCopReport.xsl</Stylesheet>
  <SaveMessages>
   <Project Status="Active, Excluded" NewOnly="False" />
   <Report Status="Active" NewOnly="False" />
  </SaveMessages>
  <CompressProjectFile DefaultTargetCheck="True" DefaultRuleCheck="True">True</CompressProjectFile>
  <PermitAnalysis>True</PermitAnalysis>
  <SourceLookup>True</SourceLookup>
 </ProjectOptions>
 <Targets>
  <Target Name="NetSpell.SpellChecker\bin\debug\NetSpell.SpellChecker.dll" Analyze="True" AnalyzeAllChildren="True" />
 </Targets>
 <RuleFiles>
  <RuleFile Name="$(FxCopDir)\Rules\ComRules.dll" Enabled="True" AllRulesEnabled="True" />
  <RuleFile Name="$(FxCopDir)\Rules\DesignRules.dll" Enabled="True" AllRulesEnabled="True" />
  <RuleFile Name="$(FxCopDir)\Rules\GlobalizationRules.dll" Enabled="True" AllRulesEnabled="True" />
  <RuleFile Name="$(FxCopDir)\Rules\NamingRules.dll" Enabled="True" AllRulesEnabled="True" />
  <RuleFile Name="$(FxCopDir)\Rules\PerformanceRules.dll" Enabled="True" AllRulesEnabled="True" />
  <RuleFile Name="$(FxCopDir)\Rules\SecurityRules.dll" Enabled="True" AllRulesEnabled="True" />
  <RuleFile Name="$(FxCopDir)\Rules\UsageRules.dll" Enabled="True" AllRulesEnabled="True" />
 </RuleFiles>
 <FxCopReport Version="1.23" LastAnalysis="2003-11-10 07:44:50Z">
  <Namespaces>
   <Namespace Name="NetSpell.SpellChecker.Dictionary">
    <Messages>
     <Message Level="Warning" Certainty="50" Status="Active" Created="2003-11-10 07:07:28Z">
      <Rule TypeName="AvoidNamespacesWithFewMembers" />
      <Resolution>
       <Data>
        <Items>
         <Item>NetSpell.SpellChecker.Dictionary</Item>
        </Items>
       </Data>
      </Resolution>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="NetSpell.SpellChecker.Dictionary.Phonetic">
    <Messages>
     <Message Level="Warning" Certainty="50" Status="Active" Created="2003-11-10 07:07:28Z">
      <Rule TypeName="AvoidNamespacesWithFewMembers" />
      <Resolution>
       <Data>
        <Items>
         <Item>NetSpell.SpellChecker.Dictionary.Phonetic</Item>
        </Items>
       </Data>
      </Resolution>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="NetSpell.SpellChecker.Forms">
    <Messages>
     <Message Level="Warning" Certainty="50" Status="Active" Created="2003-11-10 07:07:28Z">
      <Rule TypeName="AvoidNamespacesWithFewMembers" />
      <Resolution>
       <Data>
        <Items>
         <Item>NetSpell.SpellChecker.Forms</Item>
        </Items>
       </Data>
      </Resolution>
     </Message>
    </Messages>
   </Namespace>
  </Namespaces>
  <Targets>
   <Target Name="NetSpell.SpellChecker\bin\debug\NetSpell.SpellChecker.dll">
    <Messages>
     <Message Level="CriticalError" Certainty="99" Status="Active" Created="2003-11-10 07:07:28Z">
      <Rule TypeName="AssembliesHavePermissionRequests" />
      <Resolution>
       <Data>
        <Items>
         <Item>NetSpell.SpellChecker</Item>
        </Items>
       </Data>
      </Resolution>
     </Message>
    </Messages>
    <Modules>
     <Module Name="netspell.spellchecker.dll">
      <Namespaces>
       <Namespace Name="NetSpell.SpellChecker">
        <Classes>
         <Class Name="Spelling">
          <Enums>
           <Enum Name="SuggestionEnum">
            <Messages>
             <Message Level="Error" Certainty="99" Status="Active" Created="2003-11-10 07:07:28Z">
              <Rule TypeName="EnumerationNamesDoNotHaveEnumSuffix" />
              <Resolution>
               <Data>
                <Items>
                 <Item>SuggestionEnum</Item>
                </Items>
               </Data>
              </Resolution>
             </Message>
            </Messages>
           </Enum>
          </Enums>
          <Methods>
           <Method Name="BadChar(System.Collections.ArrayList&amp;):System.Void">
            <Messages>
             <Message Level="Error" Certainty="95" Status="Active" Created="2003-11-10 07:07:28Z">
              <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker" File="Spelling.cs" Line="300" />
              <Rule TypeName="CultureInfoShouldBePassed" />
              <Resolution>
               <Data>
                <Items>
                 <Item>Spelling.BadChar(System.Collections.ArrayList&amp;)</Item>
                 <Item>

String.ToLower()</Item>
                </Items>
               </Data>
              </Resolution>
             </Message>
            </Messages>
           </Method>
           <Method Name="ForgotChar(System.Collections.ArrayList&amp;):System.Void">
            <Messages>
             <Message Level="Error" Certainty="95" Status="Active" Created="2003-11-10 07:07:28Z">
              <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker" File="Spelling.cs" Line="349" />
              <Rule TypeName="CultureInfoShouldBePassed" />
              <Resolution>
               <Data>
                <Items>
                 <Item>Spelling.ForgotChar(System.Collections.ArrayList&amp;)</Item>
                 <Item>

String.ToLower()</Item>
                </Items>
               </Data>
              </Resolution>
             </Message>
            </Messages>
           </Method>
           <Method Name="ReplaceChars(System.Collections.ArrayList&amp;):System.Void">
            <Messages>
             <Message Level="Error" Certainty="95" Status="Active" Created="2003-11-10 07:07:28Z">
              <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker" File="Spelling.cs" Line="376" />
              <Rule TypeName="CultureInfoShouldBePassed" />
              <Resolution>
               <Data>
                <Items>
                 <Item>Spelling.ReplaceChars(System.Collections.ArrayList&amp;)</Item>
                 <Item>

String.ToLower()</Item>
                </Items>
               </Data>
              </Resolution>
             </Message>
             <Message Level="Error" Certainty="95" Status="Active" Created="2003-11-10 07:07:28Z">
              <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker" File="Spelling.cs" Line="376" />
              <Rule TypeName="IFormatProviderShouldBePassed" />
              <Resolution>
               <Data>
                <Items>
                 <Item>Spelling.ReplaceChars(System.Collections.ArrayList&amp;)</Item>
                 <Item>

String.ToString()</Item>
                </Items>
               </Data>
              </Resolution>
             </Message>
            </Messages>
           </Method>
           <Method Name="SpellCheck(System.Int32,System.Int32):System.Boolean">
            <Messages>
             <Message Level="Error" Certainty="95" Status="Active" Created="2003-11-10 07:07:28Z">
              <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker" File="Spelling.cs" Line="779" />
              <Rule TypeName="IFormatProviderShouldBePassed" />
              <Resolution>
               <Data>
                <Items>
                 <Item>Spelling.SpellCheck(System.Int32,System.Int32)</Item>
                 <Item>

String.ToString()</Item>
                </Items>
               </Data>
              </Resolution>
             </Message>
            </Messages>
           </Method>
           <Method Name="SwapChar(System.Collections.ArrayList&amp;):System.Void">
            <Messages>
             <Message Level="Error" Certainty="95" Status="Active" Created="2003-11-10 07:07:28Z">
              <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker" File="Spelling.cs" Line="408" />
              <Rule TypeName="CultureInfoShouldBePassed" />
              <Resolution>
               <Data>
                <Items>
                 <Item>Spelling.SwapChar(System.Collections.ArrayList&amp;)</Item>
                 <Item>

String.ToLower()</Item>
                </Items>
               </Data>
              </Resolution>
             </Message>
            </Messages>
           </Method>
           <Method Name="TestWord(System.String):System.Boolean">
            <Messages>
             <Message Level="Error" Certainty="95" Status="Active" Created="2003-11-10 07:07:28Z">
              <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker" File="Spelling.cs" Line="1005" />
              <Rule TypeName="CultureInfoShouldBePassed" />
              <Resolution>
               <Data>
                <Items>
                 <Item>Spelling.TestWord(System.String)</Item>
                 <Item>

String.ToLower()</Item>
                </Items>
               </Data>
              </Resolution>
             </Message>
            </Messages>
           </Method>
           <Method Name="TwoWords(System.Collections.ArrayList&amp;):System.Void">
            <Messages>
             <Message Level="Error" Certainty="95" Status="Active" Created="2003-11-10 07:07:28Z">
              <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker" File="Spelling.cs" Line="434" />
              <Rule TypeName="CultureInfoShouldBePassed" />
              <Resolution>
               <Data>
                <Items>
                 <Item>Spelling.TwoWords(System.Collections.ArrayList&amp;)</Item>
                 <Item>

String.ToLower()</Item>
                </Items>
               </Data>
              </Resolution>
             </Message>
             <Message Level="Error" Certainty="95" Status="Active" Created="2003-11-10 07:07:28Z">
              <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker" File="Spelling.cs" Line="434" />
              <Rule TypeName="IFormatProviderShouldBePassed" />
              <Resolution>
               <Data>
                <Items>
                 <Item>Spelling.TwoWords(System.Collections.ArrayList&amp;)</Item>
                 <Item>

String.ToString()</Item>
                </Items>
               </Data>
              </Resolution>
             </Message>
            </Messages>
           </Method>
          </Methods>
          <Properties>
           <Property Name="IgnoreList">
            <Messages>
             <Message Level="Warning" Certainty="75" Status="Active" Created="2003-11-10 07:07:28Z">
              <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker" File="Spelling.cs" Line="1136" />
              <Rule TypeName="PropertiesReturningCollectionsShouldBeReadOnly" />
              <Resolution>
               <Data>
                <Items>
                 <Item>IgnoreList</Item>
                </Items>
               </Data>
              </Resolution>
             </Message>
            </Messages>
           </Property>
           <Property Name="ReplaceList">
            <Messages>
             <Message Level="Warning" Certainty="75" Status="Active" Created="2003-11-10 07:07:28Z">
              <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker" File="Spelling.cs" Line="1178" />
              <Rule TypeName="PropertiesReturningCollectionsShouldBeReadOnly" />
              <Resolution>
               <Data>
                <Items>
                 <Item>ReplaceList</Item>
                </Items>
               </Data>
              </Resolution>
             </Message>
            </Messages>
           </Property>
           <Property Name="WordIndex">
            <Methods>
             <Method Name="set_WordIndex(System.Int32):System.Void">
              <Messages>
               <Message Level="Error" Certainty="95" Status="Active" Created="2003-11-10 07:07:28Z">
                <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker" File="Spelling.cs" Line="1305" />
                <Rule TypeName="IFormatProviderShouldBePassed" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>Spelling.set_WordIndex(System.Int32)</Item>
                   <Item>

String.ToString()</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Message>
              </Messages>
             </Method>
            </Methods>
           </Property>
          </Properties>
         </Class>
        </Classes>
       </Namespace>
       <Namespace Name="NetSpell.SpellChecker.Dictionary">
        <Classes>
         <Class Name="Word">
          <Messages>
           <Message Level="Error" Certainty="75" Status="Active" Created="2003-11-10 07:07:28Z">
            <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker\Dictionary" File="Word.cs" Line="1" />
            <Rule TypeName="IComparableImplementationsOverrideEquals" />
            <Resolution>
             <Data>
              <Items>
               <Item>Word</Item>
              </Items>
             </Data>
            </Resolution>
           </Message>
           <Message Level="Error" Certainty="75" Status="Active" Created="2003-11-10 07:07:28Z">
            <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker\Dictionary" File="Word.cs" Line="1" />
            <Rule TypeName="IComparableImplementationsOverrideOperators" />
            <Resolution>
             <Data>
              <Items>
               <Item>Word</Item>
               <Item>==</Item>
              </Items>
             </Data>
            </Resolution>
           </Message>
          </Messages>
         </Class>
         <Class Name="WordDictionary">
          <Messages>
           <Message Level="CriticalError" Certainty="99" Status="Active" Created="2003-11-10 07:07:28Z">
            <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker\Dictionary" File="WordDictionary.cs" Line="1" />
            <Rule TypeName="OnlyDictionaryNamesHaveDictionarySuffix" />
            <Resolution>
             <Data>
              <Items>
               <Item>WordDictionary</Item>
              </Items>
             </Data>
            </Resolution>
           </Message>
          </Messages>
          <Methods>
           <Method Name="PhoneticCode(System.String):System.String">
            <Messages>
             <Message Level="Error" Certainty="95" Status="Active" Created="2003-11-10 07:07:28Z">
              <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker\Dictionary" File="WordDictionary.cs" Line="515" />
              <Rule TypeName="CultureInfoShouldBePassed" />
              <Resolution>
               <Data>
                <Items>
                 <Item>WordDictionary.PhoneticCode(System.String)</Item>
                 <Item>

String.ToUpper()</Item>
                </Items>
               </Data>
              </Resolution>
             </Message>
            </Messages>
           </Method>
          </Methods>
          <Properties>
           <Property Name="BaseWords">
            <Messages>
             <Message Level="Warning" Certainty="75" Status="Active" Created="2003-11-10 07:07:28Z">
              <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker\Dictionary" File="WordDictionary.cs" Line="602" />
              <Rule TypeName="PropertiesReturningCollectionsShouldBeReadOnly" />
              <Resolution>
               <Data>
                <Items>
                 <Item>BaseWords</Item>
                </Items>
               </Data>
              </Resolution>
             </Message>
            </Messages>
           </Property>
           <Property Name="UserWords">
            <Messages>
             <Message Level="Warning" Certainty="75" Status="Active" Created="2003-11-10 07:07:28Z">
              <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker\Dictionary" File="WordDictionary.cs" Line="754" />
              <Rule TypeName="PropertiesReturningCollectionsShouldBeReadOnly" />
              <Resolution>
               <Data>
                <Items>
                 <Item>UserWords</Item>
                </Items>
               </Data>
              </Resolution>
             </Message>
            </Messages>
           </Property>
          </Properties>
         </Class>
        </Classes>
       </Namespace>
       <Namespace Name="NetSpell.SpellChecker.Dictionary.Affix">
        <Classes>
         <Class Name="AffixEntry">
          <Properties>
           <Property Name="Condition">
            <Messages>
             <Message Level="Warning" Certainty="75" Status="Active" Created="2003-11-10 07:07:28Z">
              <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker\Dictionary\Affix" File="AffixEntry.cs" Line="38" />
              <Rule TypeName="PropertiesReturningCollectionsShouldBeReadOnly" />
              <Resolution>
               <Data>
                <Items>
                 <Item>Condition</Item>
                </Items>
               </Data>
              </Resolution>
             </Message>
             <Message Level="Warning" Certainty="50" Status="Active" Created="2003-11-10 07:07:28Z">
              <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker\Dictionary\Affix" File="AffixEntry.cs" Line="38" />
              <Rule TypeName="PropertiesShouldNotReturnArrays" />
              <Resolution>
               <Data>
                <Items>
                 <Item>Condition</Item>
                </Items>
               </Data>
              </Resolution>
             </Message>
            </Messages>
           </Property>
          </Properties>
         </Class>
         <Class Name="AffixRule">
          <Properties>
           <Property Name="AffixEntries">
            <Messages>
             <Message Level="Warning" Certainty="75" Status="Active" Created="2003-11-10 07:07:28Z">
              <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker\Dictionary\Affix" File="AffixRule.cs" Line="38" />
              <Rule TypeName="PropertiesReturningCollectionsShouldBeReadOnly" />
              <Resolution>
               <Data>
                <Items>
                 <Item>AffixEntries</Item>
                </Items>
               </Data>
              </Resolution>
             </Message>
            </Messages>
           </Property>
          </Properties>
         </Class>
         <Class Name="AffixRuleCollection">
          <Messages>
           <Message Level="Error" Certainty="95" Status="Active" Created="2003-11-10 07:07:28Z">
            <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker\Dictionary\Affix" File="AffixRuleCollection.cs" Line="1" />
            <Rule TypeName="DictionaryNamesHaveDictionarySuffix" />
            <Resolution>
             <Data>
              <Items>
               <Item>AffixRuleCollection</Item>
              </Items>
             </Data>
            </Resolution>
           </Message>
           <Message Level="Error" Certainty="90" Status="Active" Created="2003-11-10 07:07:28Z">
            <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker\Dictionary\Affix" File="AffixRuleCollection.cs" Line="1" />
            <Rule TypeName="ICollectionImplementationsHaveStronglyTypedMembers" />
            <Resolution>
             <Data>
              <Items>
               <Item>AffixRuleCollection</Item>
               <Item>CopyTo</Item>
              </Items>
             </Data>
            </Resolution>
           </Message>
           <Message Level="Error" Certainty="99" Status="Active" Created="2003-11-10 07:07:28Z">
            <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker\Dictionary\Affix" File="AffixRuleCollection.cs" Line="1" />
            <Rule TypeName="MemberNamesDifferByMoreThanCase" />
            <Resolution>
             <Data>
              <Items>
               <Item>innerHash</Item>
               <Item>InnerHash</Item>
              </Items>
             </Data>
            </Resolution>
           </Message>
          </Messages>
          <Fields>
           <Field Name="innerHash">
            <Messages>
             <Message Level="Error" Certainty="90" Status="Active" Created="2003-11-10 07:07:28Z">
              <Rule TypeName="TypesDoNotHavePublicInstanceFields" />
              <Resolution>
               <Data>
                <Items>
                 <Item>innerHash</Item>
                </Items>
               </Data>
              </Resolution>
             </Message>
            </Messages>
           </Field>
          </Fields>
          <Methods>
           <Method Name="System.Collections.IDictionary.Add(System.Object,System.Object):System.Void">
            <Messages>
             <Message Level="Error" Certainty="95" Status="Active" Created="2003-11-10 07:07:28Z">
              <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker\Dictionary\Affix" File="AffixRuleCollection.cs" Line="309" />
              <Rule TypeName="ExplicitMethodImplementationsInUnsealedClassesHaveVisibleAlternates" />
              <Resolution>
               <Data>
                <Items>
                 <Item>AffixRuleCollection</Item>
                 <Item>Void System.Collections.IDictionary.Add(System.Object, System.Object)</Item>
                 <Item>protected void Add(object, object);</Item>
                </Items>
               </Data>
              </Resolution>
             </Message>
            </Messages>
           </Method>
           <Method Name="System.Collections.IDictionary.Contains(System.Object):System.Boolean">
            <Messages>
             <Message Level="Error" Certainty="95" Status="Active" Created="2003-11-10 07:07:28Z">
              <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker\Dictionary\Affix" File="AffixRuleCollection.cs" Line="279" />
              <Rule TypeName="ExplicitMethodImplementationsInUnsealedClassesHaveVisibleAlternates" />
              <Resolution>
               <Data>
                <Items>
                 <Item>AffixRuleCollection</Item>
                 <Item>Boolean System.Collections.IDictionary.Contains(System.Object)</Item>
                 <Item>protected Boolean Contains(object);</Item>
                </Items>
               </Data>
              </Resolution>
             </Message>
            </Messages>
           </Method>
           <Method Name="System.Collections.IDictionary.Remove(System.Object):System.Void">
            <Messages>
             <Message Level="Error" Certainty="95" Status="Active" Created="2003-11-10 07:07:28Z">
              <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker\Dictionary\Affix" File="AffixRuleCollection.cs" Line="259" />
              <Rule TypeName="ExplicitMethodImplementationsInUnsealedClassesHaveVisibleAlternates" />
              <Resolution>
               <Data>
                <Items>
                 <Item>AffixRuleCollection</Item>
                 <Item>Void System.Collections.IDictionary.Remove(System.Object)</Item>
                 <Item>protected void Remove(object);</Item>
                </Items>
               </Data>
              </Resolution>
             </Message>
            </Messages>
           </Method>
          </Methods>
          <Properties>
           <Property Name="System.Collections.IDictionary.Item[System.Object]">
            <Methods>
             <Method Name="System.Collections.IDictionary.get_Item(System.Object):System.Object">
              <Messages>
               <Message Level="Error" Certainty="95" Status="Active" Created="2003-11-10 07:07:28Z">
                <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker\Dictionary\Affix" File="AffixRuleCollection.cs" Line="346" />
                <Rule TypeName="ExplicitMethodImplementationsInUnsealedClassesHaveVisibleAlternates" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>AffixRuleCollection</Item>
                   <Item>System.Object System.Collections.IDictionary.get_Item(System.Object)</Item>
                   <Item>protected Object Item[System.Object] { get; }</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Message>
              </Messages>
             </Method>
             <Method Name="System.Collections.IDictionary.set_Item(System.Object,System.Object):System.Void">
              <Messages>
               <Message Level="Error" Certainty="95" Status="Active" Created="2003-11-10 07:07:28Z">
                <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker\Dictionary\Affix" File="AffixRuleCollection.cs" Line="350" />
                <Rule TypeName="ExplicitMethodImplementationsInUnsealedClassesHaveVisibleAlternates" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>AffixRuleCollection</Item>
                   <Item>Void System.Collections.IDictionary.set_Item(System.Object, System.Object)</Item>
                   <Item>protected Object Item[System.Object] { set; }</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Message>
              </Messages>
             </Method>
            </Methods>
           </Property>
          </Properties>
         </Class>
         <Class Name="AffixRuleEnumerator">
          <Messages>
           <Message Level="Error" Certainty="90" Status="Active" Created="2003-11-10 07:07:28Z">
            <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker\Dictionary\Affix" File="AffixRuleEnumerator.cs" Line="1" />
            <Rule TypeName="IEnumeratorImplementationsHaveStronglyTypedMembers" />
            <Resolution>
             <Data>
              <Items>
               <Item>AffixRuleEnumerator</Item>
              </Items>
             </Data>
            </Resolution>
           </Message>
          </Messages>
         </Class>
         <Class Name="AffixUtility">
          <Messages>
           <Message Level="Error" Certainty="90" Status="Active" Created="2003-11-10 07:07:28Z">
            <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker\Dictionary\Affix" File="AffixUtility.cs" Line="1" />
            <Rule TypeName="TypesHavingOnlyStaticMembersShouldNotHaveConstructors" />
            <Resolution>
             <Data>
              <Items>
               <Item>AffixUtility</Item>
              </Items>
             </Data>
            </Resolution>
           </Message>
          </Messages>
         </Class>
        </Classes>
       </Namespace>
       <Namespace Name="NetSpell.SpellChecker.Dictionary.Phonetic">
        <Classes>
         <Class Name="PhoneticRule">
          <Properties>
           <Property Name="Condition">
            <Messages>
             <Message Level="Warning" Certainty="50" Status="Active" Created="2003-11-10 07:07:28Z">
              <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker\Dictionary\Phonetic" File="PhoneticRule.cs" Line="41" />
              <Rule TypeName="PropertiesShouldNotReturnArrays" />
              <Resolution>
               <Data>
                <Items>
                 <Item>Condition</Item>
                </Items>
               </Data>
              </Resolution>
             </Message>
            </Messages>
           </Property>
          </Properties>
         </Class>
         <Class Name="PhoneticUtility">
          <Messages>
           <Message Level="CriticalWarning" Certainty="75" Status="Active" Created="2003-11-10 07:44:50Z">
            <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker\Dictionary\Phonetic" File="PhoneticUtility.cs" Line="1" />
            <Rule TypeName="TypesHavingOnlyStaticMembersShouldBeSealed" />
            <Resolution>
             <Data>
              <Items>
               <Item>PhoneticUtility</Item>
              </Items>
             </Data>
            </Resolution>
           </Message>
          </Messages>
          <Methods>
           <Method Name="EncodeRule(System.String,NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRule&amp;):System.Void">
            <Messages>
             <Message Level="Error" Certainty="95" Status="Active" Created="2003-11-10 07:07:28Z">
              <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker\Dictionary\Phonetic" File="PhoneticUtility.cs" Line="34" />
              <Rule TypeName="IFormatProviderShouldBePassed" />
              <Resolution>
               <Data>
                <Items>
                 <Item>PhoneticUtility.EncodeRule(System.String,NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRule&amp;)</Item>
                 <Item>

Int32.Parse(System.String)</Item>
                </Items>
               </Data>
              </Resolution>
             </Message>
            </Messages>
            <Parameters>
             <Parameter Name="1">
              <Messages>
               <Message Level="Warning" Certainty="75" Status="Active" Created="2003-11-10 07:07:28Z">
                <Rule TypeName="ReferenceTypesAreNotPassedAsByRefParameters" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>rule</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Message>
              </Messages>
             </Parameter>
            </Parameters>
           </Method>
          </Methods>
         </Class>
        </Classes>
       </Namespace>
       <Namespace Name="NetSpell.SpellChecker.Forms">
        <Classes>
         <Class Name="OptionForm">
          <Methods>
           <Method Name="OptionForm_Load(System.Object,System.EventArgs):System.Void">
            <Messages>
             <Message Level="Error" Certainty="95" Status="Active" Created="2003-11-10 07:07:28Z">
              <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker\Forms" File="OptionsForm.cs" Line="69" />
              <Rule TypeName="CultureInfoShouldBePassed" />
              <Resolution>
               <Data>
                <Items>
                 <Item>OptionForm.OptionForm_Load(System.Object,System.EventArgs)</Item>
                 <Item>

String.ToLower()</Item>
                </Items>
               </Data>
              </Resolution>
             </Message>
            </Messages>
           </Method>
          </Methods>
         </Class>
         <Class Name="SpellingForm">
          <Methods>
           <Method Name="InitializeComponent():System.Void">
            <Messages>
             <Message Level="Error" Certainty="95" Status="Active" Created="2003-11-10 07:07:28Z">
              <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker\Forms" File="SpellingForm.cs" Line="151" />
              <Rule TypeName="CultureInfoShouldBePassed" />
              <Resolution>
               <Data>
                <Items>
                 <Item>SpellingForm.InitializeComponent()</Item>
                 <Item>

ResourceManager.GetObject(System.String)</Item>
                </Items>
               </Data>
              </Resolution>
             </Message>
            </Messages>
           </Method>
           <Method Name="UpdateDisplay(System.String,System.String,System.Int32,System.Int32):System.Void">
            <Messages>
             <Message Level="Error" Certainty="95" Status="Active" Created="2003-11-10 07:07:28Z">
              <SourceCode Path="D:\My Documents\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker\Forms" File="SpellingForm.cs" Line="403" />
              <Rule TypeName="IFormatProviderShouldBePassed" />
              <Resolution>
               <Data>
                <Items>
                 <Item>SpellingForm.UpdateDisplay(System.String,System.String,System.Int32,System.Int32)</Item>
                 <Item>

Int32.ToString()</Item>
                </Items>
               </Data>
              </Resolution>
             </Message>
            </Messages>
           </Method>
          </Methods>
         </Class>
        </Classes>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
  </Targets>
  <Rules>
   <Rule TypeName="AssembliesHavePermissionRequests">
    <Name>Assemblies specify permission requests</Name>
    <Description>Permission requests prevent security exceptions from being thrown after code in an assembly has already begun executing. With permission requests, the assembly does not load if it has insufficient permissions. This rule will generate a message if you have specified a permission request incorrectly, or incompletely. If you have specified requests but FxCop reports a message from this rule, use the PermView.exe tool to view the security permissions in the assembly. An unenforceable permission appears as an empty permission set.</Description>
    <LongDescription>You should add attributes specifying what permissions your assembly will demand, might demand, and what permissions it does not want granted.  For example, the following attribute indicates that an assembly will, at minimum, require read access to the USERNAME environment variable: [assembly:EnvironmentPermissionAttribute(SecurityAction.RequestMinimum,
Read="USERNAME")]. To specify permissions that the assembly might demand, use SecurityAction.RequestOptional. To specify permissions that the assembly must not be granted, use SecurityAction.RequestRefuse.</LongDescription>
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/UsageRules/AssembliesPermissionRequests.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="99">CriticalError</MessageLevel>
    <File Name="UsageRules.dll" Version="1.23.0.0" />
   </Rule>
   <Rule TypeName="AvoidNamespacesWithFewMembers">
    <Name>Avoid having a namespace with a small number of types</Name>
    <Description>A namespace should generally have more than five types.</Description>
    <LongDescription />
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/DesignRules/AvoidSmallNamespaces.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="50">Warning</MessageLevel>
    <File Name="DesignRules.dll" Version="1.23.0.0" />
   </Rule>
   <Rule TypeName="CultureInfoShouldBePassed">
    <Name>CultureInfo should be passed</Name>
    <Description>If an overload exists that takes a System.Globalization.CultureInfo argument, it should always be called in favor of an overload that does not.</Description>
    <LongDescription>The CultureInfo type contains culture-specific information required for performing numeric and string operations, such as casing, formatting, and string comparisons. In scenarios where conversion and parsing behavior should never change between cultures, specify CultureInfo.InvariantCulture.</LongDescription>
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/Globalization/CultureInfoPassed.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="95">Error</MessageLevel>
    <File Name="GlobalizationRules.dll" Version="1.23.0.0" />
   </Rule>
   <Rule TypeName="DictionaryNamesHaveDictionarySuffix">
    <Name>Dictionary names have the 'Dictionary' suffix</Name>
    <Description>A type that extends Dictionary should be suffixed with 'Dictionary', as in StringDictionary.</Description>
    <LongDescription />
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/NamingRules/DictionaryNamesHaveDictionarySuffix.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="95">Error</MessageLevel>
    <File Name="NamingRules.dll" Version="1.23.0.0" />
   </Rule>
   <Rule TypeName="EnumerationNamesDoNotHaveEnumSuffix">
    <Name>Enumeration names do not have an 'Enum' suffix</Name>
    <Description>An enumeration name should not end in 'Enum'.</Description>
    <LongDescription />
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/NamingRules/EnumNamesDoNotHaveEnumSuffix.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="99">Error</MessageLevel>
    <File Name="NamingRules.dll" Version="1.23.0.0" />
   </Rule>
   <Rule TypeName="ExplicitMethodImplementationsInUnsealedClassesHaveVisibleAlternates">
    <Name>Explicit method implementations in unsealed classes should provide alternate methods with protected accessibility</Name>
    <Description>Explicit method implementations are defined with private accessibility. Classes that derive from classes with explicit method implementations and choose to re-declare them on the class will not be able to call into the base class implementation unless the base class has provided an alternate method with appropriate accessibility.</Description>
    <LongDescription>When overriding a base class method that has been hidden by explicit interface implementation, in order to call into the base class implementation, a derived class must cast the base pointer to the relevant interface. When calling through this reference, however, the derived class implementation will actually be invoked, resulting in recursion and an eventual stack overflow.</LongDescription>
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/DesignRules/ExplicitMethodImplementations.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="95">Error</MessageLevel>
    <File Name="DesignRules.dll" Version="1.23.0.0" />
   </Rule>
   <Rule TypeName="ICollectionImplementationsHaveStronglyTypedMembers">
    <Name>ICollection implementations have strongly typed members</Name>
    <Description>Types that implement ICollection should also provide a version of CopyTo with the first parameter set to a strong type, namely a type other than an array of objects or System.Array. Implement the interface member explicitly and make the strongly typed version public.</Description>
    <LongDescription>It is safe to ignore messages from this rule when you are implementing a new object-based collection, such as a binary tree, where types based on your collection will determine what the strong type is. These types should expose strongly typed members.</LongDescription>
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/DesignRules/ICollectionsStronglyTyped.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="90">Error</MessageLevel>
    <File Name="DesignRules.dll" Version="1.23.0.0" />
   </Rule>
   <Rule TypeName="IComparableImplementationsOverrideEquals">
    <Name>IComparable implementations override System.Object.Equals</Name>
    <Description>Types that implement IComparable should redefine Equals to keep the meanings of less than, greater than, and equals consistent throughout the type.</Description>
    <LongDescription />
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/DesignRules/IComparableEquals.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="75">Error</MessageLevel>
    <File Name="DesignRules.dll" Version="1.23.0.0" />
   </Rule>
   <Rule TypeName="IComparableImplementationsOverrideOperators">
    <Name>IComparable implementations override operators</Name>
    <Description>Types that implement IComparable should redefine comparison operators to keep the meanings of less than, greater than, and equals consistent throughout the type.</Description>
    <LongDescription />
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/DesignRules/IComparableOperators.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="75">Error</MessageLevel>
    <File Name="DesignRules.dll" Version="1.23.0.0" />
   </Rule>
   <Rule TypeName="IEnumeratorImplementationsHaveStronglyTypedMembers">
    <Name>IEnumerator implementations have strongly typed members</Name>
    <Description>Types that implement IEnumerator should also provide a version of the Current property that returns a type other than Object.  Implement the interface member explicitly and make the strongly typed version public.</Description>
    <LongDescription />
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/DesignRules/IEnumeratorStronglyTyped.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="90">Error</MessageLevel>
    <File Name="DesignRules.dll" Version="1.23.0.0" />
   </Rule>
   <Rule TypeName="IFormatProviderShouldBePassed">
    <Name>IFormatProvider should be passed</Name>
    <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not.</Description>
    <LongDescription>Some methods in the common language runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture.</LongDescription>
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/Globalization/IFormatProviderPassed.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="95">Error</MessageLevel>
    <File Name="GlobalizationRules.dll" Version="1.23.0.0" />
   </Rule>
   <Rule TypeName="MemberNamesDifferByMoreThanCase">
    <Name>Member names differ by more than case</Name>
    <Description>Do not use names that require case sensitivity for uniqueness.</Description>
    <LongDescription />
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/NamingRules/MemberNamesDifferByMoreThanCase.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="99">Error</MessageLevel>
    <File Name="NamingRules.dll" Version="1.23.0.0" />
   </Rule>
   <Rule TypeName="OnlyDictionaryNamesHaveDictionarySuffix">
    <Name>Only dictionary names have the 'Dictionary' suffix</Name>
    <Description>Types that do not extend Dictionary do not have the 'Dictionary' suffix.</Description>
    <LongDescription />
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/NamingRules/OnlyDictionaryNamesHaveDictionarySuffix.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="99">CriticalError</MessageLevel>
    <File Name="NamingRules.dll" Version="1.23.0.0" />
   </Rule>
   <Rule TypeName="PropertiesReturningCollectionsShouldBeReadOnly">
    <Name>Properties that return collections should be read-only</Name>
    <Description>Properties that return collections should be read-only so that users cannot entirely replace the backing store. Users can still modify the contents of the collection by calling relevant methods on the collection.</Description>
    <LongDescription>Note that the XmlSerializer class has special support for deserializing read-only collections. See the XmlSerializer overview for more information.</LongDescription>
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/UsageRules/PropertiesCollectionsReadOnly.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="75">Warning</MessageLevel>
    <File Name="UsageRules.dll" Version="1.23.0.0" />
   </Rule>
   <Rule TypeName="PropertiesShouldNotReturnArrays">
    <Name>Properties should not return arrays</Name>
    <Description>Properties that return arrays are prone to code inefficiencies.</Description>
    <LongDescription>Consider using a collection or making this a method. See the design guidelines for more information.</LongDescription>
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/Performance/PropertyArray.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="50">Warning</MessageLevel>
    <File Name="PerformanceRules.dll" Version="1.23.0.0" />
   </Rule>
   <Rule TypeName="ReferenceTypesAreNotPassedAsByRefParameters">
    <Name>Reference types are not passed as ref (pointer) parameters</Name>
    <Description>Reference types are pointers by definition, so a ref parameter that takes a reference type is a double indirection (analogous to a 'double pointer' in C++). This design is inappropriate for most managed code scenarios.</Description>
    <LongDescription>Although there are legitimate times to use reference parameters for reference types, such use frequently indicates a design that does not conform to the design guidelines for managed code.</LongDescription>
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/DesignRules/RefTypeNotRefParm.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="75">Warning</MessageLevel>
    <File Name="DesignRules.dll" Version="1.23.0.0" />
   </Rule>
   <Rule TypeName="TypesDoNotHavePublicInstanceFields">
    <Name>Types do not have externally visible instance fields</Name>
    <Description>Public or protected instance fields limit your ability to change the implementation details for those data items.</Description>
    <LongDescription>Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the  implementation details of the underlying data.</LongDescription>
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/DesignRules/TypesDoNotHavePublicInstanceFields.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="90">Error</MessageLevel>
    <File Name="DesignRules.dll" Version="1.23.0.0" />
   </Rule>
   <Rule TypeName="TypesHavingOnlyStaticMembersShouldBeSealed">
    <Name>Types with only static members should be sealed (NotInheritable)</Name>
    <Description>Static holder types do not provide functionality that derived instances can extend. Inheriting from such a type indicates a flawed design.</Description>
    <LongDescription />
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/DesignRules/TypesHavingStaticMembers.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
    <File Name="DesignRules.dll" Version="1.23.0.0" />
   </Rule>
   <Rule TypeName="TypesHavingOnlyStaticMembersShouldNotHaveConstructors">
    <Name>Types with only static members should not have public or protected constructors</Name>
    <Description>Instances of types that define only static members do not need to be created.</Description>
    <LongDescription>Many compilers will automatically add a public default constructor if no constructor is specified.  To prevent this, adding an empty private constructor may be required.</LongDescription>
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/DesignRules/StaticTypesNoCtors.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="90">Error</MessageLevel>
    <File Name="DesignRules.dll" Version="1.23.0.0" />
   </Rule>
  </Rules>
 </FxCopReport>
</FxCopProject>
